---
systemd:
  units:
    - name: docker.service
      enable: false
      mask: true

    - name: containerd.service
      enable: false
      mask: true

    - name: update-engine.service
      enable: false
      mask: true

    - name: fetch-metadata.service
      enable: true
      contents: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        AssertPathExists=!/etc/metadata.env
        [Service]
        Type=oneshot
        EnvironmentFile=/etc/metadata-endpoints.env
        ExecStart=/usr/bin/curl ${API_URI}/metadata?${REQUEST_RAW_QUERY} -o /etc/metadata.env
        RemainAfterExit=yes
        [Install]
        WantedBy=multi-user.target

    - name: install-etcd.service
      enable: true
      contents: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        AssertFileIsExecutable=!/opt/rootfs/usr/bin/etcd
        [Service]
        Type=oneshot
        Environment=IMAGE={{.etcd_image_url}}
        ExecStartPre=/usr/bin/rkt fetch --insecure-options=all $IMAGE
        ExecStartPre=/usr/bin/rkt image export $IMAGE /tmp/%p.aci
        ExecStartPre=/usr/bin/rkt image rm $IMAGE
        ExecStartPre=/usr/bin/tar -C /opt/rootfs -xvf /tmp/%p.aci --strip-components=1
        ExecStartPre=/bin/rm -v /tmp/%p.aci

        ExecStart=/usr/bin/ln -sfv /opt/rootfs/usr/bin/etcdctl /opt/bin/etcdctl
        ExecReload=-/bin/rm -v /opt/rootfs/usr/bin/etcd
        RemainAfterExit=yes
        [Install]
        WantedBy=multi-user.target

    - name: install-fleet.service
      enable: true
      contents: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        AssertFileIsExecutable=!/opt/rootfs/usr/bin/fleetd
        [Service]
        Type=oneshot
        Environment=IMAGE={{.fleet_image_url}}
        ExecStartPre=/usr/bin/rkt fetch --insecure-options=all $IMAGE
        ExecStartPre=/usr/bin/rkt image export $IMAGE /tmp/%p.aci
        ExecStartPre=/usr/bin/rkt image rm $IMAGE
        ExecStartPre=/usr/bin/tar -C /opt/rootfs -xvf /tmp/%p.aci --strip-components=1
        ExecStartPre=/bin/rm -v /tmp/%p.aci

        ExecStart=/usr/bin/ln -sfv /opt/rootfs/usr/bin/fleetctl /opt/bin/fleetctl
        ExecReload=-/bin/rm -v /opt/rootfs/usr/bin/fleetd
        RemainAfterExit=yes
        [Install]
        WantedBy=multi-user.target

    - name: install-rkt.service
      enable: true
      contents: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        AssertFileIsExecutable=!/opt/rootfs/usr/bin/rkt
        [Service]
        Type=oneshot
        Environment=IMAGE={{.rkt_image_url}}
        ExecStartPre=/usr/bin/rkt fetch --insecure-options=all $IMAGE
        ExecStartPre=/usr/bin/rkt image export $IMAGE /tmp/%p.aci
        ExecStartPre=/usr/bin/rkt image rm $IMAGE
        ExecStartPre=/usr/bin/tar -C /opt/rootfs -xvf /tmp/%p.aci --strip-components=1
        ExecStartPre=/bin/rm -v /tmp/%p.aci

        ExecStart=/usr/bin/ln -sfv /opt/rootfs/usr/bin/rkt /opt/bin/rkt
        ExecReload=-/bin/rm -v /opt/rootfs/usr/bin/rkt
        RemainAfterExit=yes
        [Install]
        WantedBy=multi-user.target

    - name: install-cni.service
      enable: true
      contents: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        AssertFileIsExecutable=!/opt/rootfs/usr/bin/host-local
        [Service]
        Type=oneshot
        Environment=IMAGE={{.cni_image_url}}
        ExecStartPre=/usr/bin/rkt fetch --insecure-options=all $IMAGE
        ExecStartPre=/usr/bin/rkt image export $IMAGE /tmp/%p.aci
        ExecStartPre=/usr/bin/rkt image rm $IMAGE
        ExecStartPre=/usr/bin/tar -C /opt/rootfs -xvf /tmp/%p.aci --strip-components=1
        ExecStartPre=/bin/rm -v /tmp/%p.aci

        ExecStart=/usr/bin/ln -sfv /opt/rootfs/usr/bin/cnitool /opt/bin/cnitool
        ExecReload=-/bin/rm -v /opt/rootfs/usr/bin/host-local
        RemainAfterExit=yes
        [Install]
        WantedBy=multi-user.target

    - name: install-hyperkube.service
      enable: true
      contents: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        AssertFileIsExecutable=!/opt/rootfs/hyperkube
        [Service]
        Type=oneshot
        Environment=IMAGE={{.hyperkube_image_url}}
        ExecStartPre=/usr/bin/rkt fetch --insecure-options=all $IMAGE
        ExecStartPre=/usr/bin/rkt image export $IMAGE /tmp/%p.aci
        ExecStartPre=/usr/bin/tar -C /opt/rootfs -xvf /tmp/%p.aci --strip-components=1
        ExecStartPre=/bin/rm -v /tmp/%p.aci

        ExecStart=/usr/bin/ln -sfv /opt/rootfs/hyperkube /opt/bin/kubectl
        ExecReload=-/bin/rm -v /opt/rootfs/hyperkube
        RemainAfterExit=yes
        [Install]
        WantedBy=multi-user.target

    - name: installs.target
      contents: |
        [Unit]
        Requires=install-cni.service
        After=install-cni.service
        Requires=install-rkt.service
        After=install-rkt.service
        Requires=install-hyperkube.service
        After=install-hyperkube.service

    - name: rkt-api.service
      enable: true
      contents: |
        [Unit]
        After=install-rkt.service

        [Service]
        ExecStart=/opt/rootfs/usr/bin/rkt api-service
        Restart=always
        RestartSec=10

        [Install]
        RequiredBy=multi-user.target

    - name: systemd-timesyncd.service
      mask: true
      enable: false

    - name: ntpd.service
      enable: true

    - name: etcd.service
      mask: true
      enable: false

    - name: etcd2.service
      mask: true
      enable: false

    - name: etcd3@kubernetes.service
      enable: true
      contents: |
        [Unit]
        After=fetch-metadata.service
        After=install-etcd.service
        After=fetch-metadata.service
        Conflicts=etcd.service etcd2.service

        [Service]
        Type=notify
        EnvironmentFile=/etc/etcd-%i.env
        ExecStart=/opt/rootfs/usr/bin/etcd
        RestartSec=15s
        Restart=on-failure
        LimitNOFILE=65826
        [Install]
        WantedBy=multi-user.target

    - name: etcd3@fleet.service
      enable: true
      contents: |
        [Unit]
        After=fetch-metadata.service
        After=install-etcd.service
        After=fetch-metadata.service
        Conflicts=etcd.service etcd2.service

        [Service]
        Type=notify
        EnvironmentFile=/etc/etcd-%i.env
        ExecStart=/opt/rootfs/usr/bin/etcd
        RestartSec=15s
        Restart=on-failure
        LimitNOFILE=65826
        [Install]
        WantedBy=multi-user.target

    - name: kubelet-runonce.service
      enable: true
      contents: |
        [Unit]
        After=fetch-metadata.service
        After=installs.target
        After=rkt-api.service
        After=etcd3@kubernetes.service

        [Service]
        EnvironmentFile=/etc/metadata.env
        Environment=MANIFESTS=/etc/kubernetes/manifests
        ExecStartPre=/opt/bin/etcdctl ls
        ExecStartPre=/opt/rootfs/usr/bin/rkt fetch --pull-policy=update --insecure-options=all {{.hyperkube_image_url}}
        ExecStartPre=/bin/mkdir -pv /var/lib/kubelet/kubeconfig
        ExecStartPre=/bin/mkdir -pv $MANIFESTS
        ExecStart=/opt/rootfs/hyperkube kubelet \
          \
          --network-plugin=cni \
          --cni-bin-dir=/opt/rootfs/usr/bin \
          --cni-conf-dir=/etc/rkt/net.d \
          \
          --pod-manifest-path=${MANIFESTS} \
          --hostname-override=${KUBERNETES_NODE_NAME} \
          --node-ip=${KUBERNETES_NODE_IP} \
          --register-schedulable=false \
          --allow-privileged=true \
          --runonce=true \
          --enable-server=false \
          --cloud-provider="" \
          \
          --container-runtime=rkt \
          --rkt-path=/opt/rootfs/usr/bin/rkt \
          --v=2
        RestartSec=15s
        TimeoutStartSec=infinity
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      enable: true
      contents: |
        [Unit]
        After=kubelet-runonce.service
        After=rkt-api.service
        After=etcd3@kubernetes.service
        Requires=rkt-api.service

        [Service]
        EnvironmentFile=/etc/metadata.env
        Environment=MANIFESTS=/etc/kubernetes/manifests
        ExecStartPre=/opt/bin/etcdctl ls
        ExecStartPre=/usr/bin/curl -f http://127.0.0.1:8080/healthz
        ExecStartPre=/bin/mkdir -pv /var/lib/kubelet/kubeconfig
        ExecStartPre=/bin/mkdir -pv $MANIFESTS
        ExecStart=/opt/rootfs/hyperkube kubelet \
          \
          --network-plugin=cni \
          --cni-bin-dir=/opt/rootfs/usr/bin \
          --cni-conf-dir=/etc/rkt/net.d \
          \
          --pod-manifest-path=${MANIFESTS} \
          --hostname-override=${KUBERNETES_NODE_NAME} \
          --node-ip=${KUBERNETES_NODE_IP} \
          --register-schedulable=false \
          --allow-privileged=true \
          --enable-custom-metrics \
          --api-servers=http://127.0.0.1:{{.kubernetes_api_server_port}} \
          --node-labels=node=true \
          --cloud-provider="" \
          \
          --container-runtime=rkt \
          --rkt-path=/opt/rootfs/usr/bin/rkt \
          --v=2
        Restart=always
        RestartSec=30s

        [Install]
        WantedBy=multi-user.target

    - name: kube-proxy.service
      enable: true
      contents: |
        [Unit]
        After=kubelet.service

        [Service]
        EnvironmentFile=/etc/metadata.env
        ExecStart=/opt/rootfs/hyperkube proxy \
          --proxy-mode=iptables \
          --hostname-override=${KUBERNETES_NODE_NAME} \
          --master=http://127.0.0.1:8080 \
          --v=2
        Restart=always
        RestartSec=30

        [Install]
        WantedBy=multi-user.target

    - name: fleet.service
      enable: true
      dropins:
        - name: 10-cluster.conf
          contents: |
            [Unit]
            After=fetch-metadata.service
            After=installs.target
            After=etcd3@fleet.service
            [Service]
            EnvironmentFile=/etc/metadata.env
            ExecStart=
            ExecStart=/opt/rootfs/usr/bin/fleetd

    - name: lifecycle-ready.service
      enable: true
      contents: |
        [Unit]
        After=fetch-metadata.service
        After=etcd3@kubernetes.service
        After=kubelet.service
        [Service]
        EnvironmentFile=/etc/metadata.env
        Type=oneshot
        ExecStart=/opt/bin/lifecycle-ready
        RemainAfterExit=yes
        [Install]
        WantedBy=multi-user.target

    - name: lifecycle-update.service
      contents: |
        [Unit]
        After=fetch-metadata.service
        After=etcd3@kubernetes.service
        After=kubelet.service
        After=lifecycle-ready.service
        [Service]
        EnvironmentFile=/etc/metadata.env
        Type=oneshot
        ExecStart=/opt/bin/lifecycle-update

    - name: lifecycle-update.timer
      enable: true
      contents: |
        [Unit]
        After=fetch-metadata.service
        After=etcd3@kubernetes.service
        After=kubelet.service
        After=lifecycle-ready.service
        [Timer]
        OnActiveSec=0s
        OnUnitActiveSec=1m
        [Install]
        WantedBy=default.target


storage:
  files:
    - path: /opt/rootfs/.keep
      filesystem: root
      mode: 0644

    - path: /etc/kubernetes/manifests/kube-apiserver.yaml
      filesystem: root
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-apiserver
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-apiserver
              image: {{.hyperkube_image_url}}
              imagePullPolicy: IfNotPresent
              command:
              - /hyperkube
              - apiserver
              - proxy
              - --bind-address=127.0.0.1
              - --insecure-bind-address=127.0.0.1
              - --etcd-servers={{.kubernetes_etcd_servers}}
              - --service-cluster-ip-range={{.kubernetes_service_cluster_ip_range}}
              resources:
                requests:
                  cpu: 200m
              livenessProbe:
                httpGet:
                  host: 127.0.0.1
                  port: 8080
                  path: /healthz
                initialDelaySeconds: 15
                timeoutSeconds: 15

    - path: /etc/metadata-endpoints.env
      filesystem: root
      mode: 0644
      contents:
        inline: |
          # Customs
          API_URI={{.api_uri}}
          DISCOVERY_ADDRESS={{.api_uri}}/discovery

          # Standards
          REQUEST_RAW_QUERY="{{.request.raw_query}}"

    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: |
          {{.hostname}}

    - path: /etc/rkt/paths.d/paths.json
      filesystem: root
      mode: 0644
      contents:
        inline: |
          {
            "rktKind": "paths",
            "rktVersion": "v1",
            "stage1-images": "/opt/rootfs/usr/lib/rkt/stage1-images"
          }

    - path: /etc/rkt/stage1.d/coreos.json
      filesystem: root
      mode: 0644
      contents:
        inline: |
          {
              "rktKind": "stage1",
              "rktVersion": "v1",
              "name": "coreos.com/rkt/stage1-coreos",
              "version": "v1.25.0",
              "location": "/opt/rootfs/usr/lib/rkt/stage1-images/stage1-coreos.aci"
          }

    - path: /etc/rkt/net.d/10-k8s.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          {
            "name": "rkt.kubernetes.io",
            "type": "macvlan",
            "master": "bond0",
            "ipam": {{ .cni }}
          }

    - path: /etc/fleet/fleet.conf
      mode: 0644
      filesystem: root
      contents:
        inline: |
          etcd_servers = [ http://127.0.0.1:{{.fleet_etcd_client_port}},{{ .fleet_etcd_member_client_uri_list }} ]
          metadata = "name={{.dns_attr.shortname}}"

    - path: /etc/modprobe.d/bonding.conf
      mode: 0644
      filesystem: root
      contents:
        inline: |
          options bonding mode=1 miimon=100

    - path: /etc/hosts
      mode: 0644
      filesystem: root
      contents:
        inline: |
          127.0.0.1	localhost
          {{ if index . "etc_hosts" }}
          {{ range $element := .etc_hosts }}
          {{$element}}
          {{end}}
          {{end}}

    - path: /etc/coreos/update.conf
      mode: 0644
      filesystem: root
      contents:
        inline: |
          GROUP=stable
          REBOOT_STRATEGY=off

    - path: /etc/systemd/resolved.conf
      mode: 0644
      filesystem: root
      contents:
        inline: |
          [Resolve]
          DNS=8.8.8.8 8.8.4.4
          LLMNR=false

    - path: /var/log/journal/.keep
      mode: 0644
      filesystem: root

    - path: /etc/etcd-fleet.env
      mode: 0644
      filesystem: root
      contents:
        inline: |
          ETCD_NAME={{.etcd_name}}
          ETCD_PROXY=on
          ETCD_INITIAL_CLUSTER={{.fleet_etcd_initial_cluster}}
          ETCD_ADVERTISE_CLIENT_URLS={{.fleet_etcd_advertise_client_urls}}
          ETCD_MEMBER_CLIENT_URI_LIST={{.fleet_etcd_member_client_uri_list}}
          ETCD_DATA_DIR={{.fleet_etcd_data_dir}}
          ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:{{.fleet_etcd_client_port}}"

    - path: /etc/etcd-kubernetes.env
      mode: 0644
      filesystem: root
      contents:
        inline: |
          ETCD_NAME={{.etcd_name}}
          ETCD_PROXY=on
          ETCD_INITIAL_CLUSTER={{.kubernetes_etcd_initial_cluster}}
          ETCD_ADVERTISE_CLIENT_URLS={{.kubernetes_etcd_advertise_client_urls}}
          ETCD_MEMBER_CLIENT_URI_LIST={{.kubernetes_etcd_member_client_uri_list}}
          ETCD_DATA_DIR={{.kubernetes_etcd_data_dir}}
          ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:{{.kubernetes_etcd_client_port}}"

    - path: /etc/profile.d/path.sh
      mode: 0755
      filesystem: root
      contents:
        inline: |
           export PATH=/opt/bin:$PATH

    - path: /etc/modules-load.d/network.conf
      mode: 0644
      filesystem: root
      contents:
        inline: |
          ip_tables
          iptable_nat
          nf_nat

    - path: /opt/bin/lifecycle-update
      mode: 0544
      filesystem: root
      contents:
        inline: |
          #!/usr/bin/env bash

          set -e

          curl -f ${API_URI}/healthz

          test ${REQUEST_RAW_QUERY}

          STATUS=$(curl -f -XPOST ${API_URI}/lifecycle/ignition/${REQUEST_RAW_QUERY} \
                -d @/usr/share/oem/coreos-install.json \
                -H "Content-Type: application/json" \
                -w "%{http_code}" -o /dev/null)

          if [ ${STATUS} -ne 210 ]
          then
              echo "Nothing to do: ${STATUS}"
              exit 0
          fi

          curl -f ${API_URI}/ignition?${REQUEST_RAW_QUERY} -o /tmp/coreos-install.json
          cat /tmp/coreos-install.json | jq -e . > /dev/null

          curl -f ${API_URI}/lifecycle/rolling/${REQUEST_RAW_QUERY} || {
            exit 0
          }

          locksmithctl -endpoint {{.kubernetes_etcd_servers}} status
          locksmithctl -endpoint {{.kubernetes_etcd_servers}} unlock "${REQUEST_RAW_QUERY}" || true
          locksmithctl -endpoint {{.kubernetes_etcd_servers}} lock "${REQUEST_RAW_QUERY}"

          /opt/bin/kubectl drain {{.kubernetes_node_name}} --force --ignore-daemonsets
          systemctl stop fleet.service

          for u in install-etcd.service install-fleet.service install-cni.service install-hyperkube.service
          do
            systemctl reload $u
          done

          DISK_GUID="00000000-0000-0000-0000-000000000001"
          sgdisk --disk-guid=${DISK_GUID} /dev/sda
          cgpt show -v /dev/sda | grep -c ${DISK_GUID}

          rm -v /etc/metadata.env || true

          kexec --reuse-cmdline \
            --append="coreos.first_boot=1 coreos.randomize_disk_guid=${DISK_GUID}" \
            -l /usr/boot/vmlinuz

          cp -v /tmp/coreos-install.json /usr/share/oem/coreos-install.json

          systemctl kexec


    - path: /opt/bin/lifecycle-ready
      mode: 0544
      filesystem: root
      contents:
        inline: |
          #!/usr/bin/env bash

          test "${REQUEST_RAW_QUERY}" || exit 2

          for i in {0..60}
          do
              etcdctl --endpoint {{.kubernetes_etcd_servers}} cluster-health && break
              sleep 2
          done

          for i in {0..60}
          do
              etcdctl --endpoint {{.fleet_etcd_servers}} cluster-health && break
              sleep 2
          done

          for i in {0..60}
          do
              curl -f 127.0.0.1:{{.kubernetes_api_server_port}}/healthz && break
              sleep 2
          done

          set -e

          etcdctl --endpoint {{.kubernetes_etcd_servers}} cluster-health
          etcdctl --endpoint {{.fleet_etcd_servers}} cluster-health
          curl -f 127.0.0.1:{{.kubernetes_api_server_port}}/healthz

          set +e

          for i in {0..30}
          do
            /opt/bin/kubectl uncordon {{.kubernetes_node_name}} && break
            sleep 2
          done

          set -e

          /opt/bin/kubectl uncordon {{.kubernetes_node_name}}

          # Remove the lock
          locksmithctl -endpoint {{.kubernetes_etcd_servers}} unlock "${REQUEST_RAW_QUERY}" || true


networkd:
  units:
    - name: 00-bond0.netdev
      contents: |
        [NetDev]
        Name=bond0
        Kind=bond

    - name: 00-vbond0.netdev
      contents: |
        [NetDev]
        Name=vbond0
        Kind=macvlan
        [MACVLAN]
        Mode=bridge

    - name: 01-ethernet.network
      contents: |
        [Match]
        Name=en*
        [Network]
        Bond=bond0
        LLMNR=false

    - name: 02-ethernet.network
      contents: |
        [Match]
        Name=eth*
        [Network]
        Bond=bond0
        LLMNR=false

    - name: 02-bond0.network
      contents: |
        [Match]
        Name=bond0
        [Network]
        MACVLAN=vbond0
        LLMNR=false

    - name: 03-vbond0.network
      contents: |
        [Match]
        Name=vbond0
        [Network]
        Address={{.network.cidrv4}}
        Gateway={{.network.gateway}}
        LLMNR=false


{{ if index . "ssh_authorized_keys" }}
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        {{ range $element := .ssh_authorized_keys }}
        - {{$element}}
        {{end}}
{{end}}