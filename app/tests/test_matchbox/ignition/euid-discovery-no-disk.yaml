---
systemd:
  units:

    - name: docker.service
      enable: false
      mask: true

    - name: locksmithd.service
      enable: false
      mask: true

    - name: ntpd.service
      enable: false
      mask: true

    - name: containerd.service
      enable: false
      mask: true

    - name: update-engine.service
      enable: false
      mask: true

    - name: update-engine-stub.service
      enable: false
      mask: true

    - name: tpmd.service
      enable: false
      mask: true

    - name: tcsd.service
      enable: false
      mask: true

    {{ if index . "lldp_image_url" }}
    - name: lldpd.service
      enable: true
      contents: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        [Service]
        Environment=LLDP_VOLUME=/run/lldp
        EnvironmentFile=-/etc/metadata-endpoints.env
        ExecStartPre=/bin/mkdir -pv ${LLDP_VOLUME}
        ExecStart=/usr/bin/rkt run --insecure-options=all --mount volume=socket,target=/var/run \
          --net=host \
          {{.lldp_image_url}} \
          --volume socket,kind=host,source=${LLDP_VOLUME} \
          --exec /usr/sbin/lldpd -- -ddd
        [Install]
        WantedBy=multi-user.target
    {{end}}

    - name: installer.service
      enable: true
      contents: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        [Service]
        EnvironmentFile=/etc/metadata-endpoints.env
        # Use short timer in dev
        Environment=TIMER=2
        ExecStart=/opt/installer
        [Install]
        WantedBy=multi-user.target

storage:
  files:
    - path: /etc/hosts
      mode: 0644
      filesystem: root
      contents:
        inline: |
          127.0.0.1	localhost
          {{ if index . "etc_hosts" }}
          {{ range $element := .etc_hosts }}
          {{$element}}
          {{end}}
          {{end}}

    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: |
          discovery

    - path: /etc/discovery
      filesystem: root

    - path: /etc/metadata-endpoints.env
      filesystem: root
      mode: 0644
      contents:
        inline: |
          # Customs
          API_URI={{.api_uri}}
          DISCOVERY_ADDRESS={{.api_uri}}/discovery

          # Standards
          REQUEST_RAW_QUERY="{{.request.raw_query}}"
          NORMALIZED_MAC='"{{.request.query.mac}}"'

    - path: /opt/installer
      filesystem: root
      mode: 0500
      contents:
        inline: |
          #!/bin/bash -x

          export LLDP_VOLUME=/run/lldp
          export LLDP_FILE=/run/lldp/lldp.xml
          export IGNITION_FILE=/run/ignition.journal

          # Prepare the ignition logs
          journalctl --identifier=ignition -o short-iso > ${IGNITION_FILE}

          {{ if index . "lldp_image_url" }}
          # LLDP export xml file
          rkt run --insecure-options=all --mount volume=socket,target=/var/run \
             --net=host \
             {{.lldp_image_url}} \
             --volume socket,kind=host,source=${LLDP_VOLUME} \
             --exec opt/bin/lldp-export
          {{end}}

          # Clean the store to save space
          rkt image gc --grace-period=0s
          rkt gc --grace-period=0s

          for t in {1..6}
          do
            /usr/bin/discoveryC && break
            sleep ${t}
          done

          set -o pipefail

          NEW_IGNITION=/run/new-ignition.json

          if [ -z ${TIMER} ]
          then
              TIMER=60
          fi

          QUERY="${REQUEST_RAW_QUERY}{{if index . "extra_selectors"}}&{{.extra_selectors}}{{end}}"

          while true
          do

              curl -f ${API_URI}/scheduler | jq -e ". | has(${NORMALIZED_MAC})"
              if [ $? -ne 0 ]
              then
                echo "${API_URI}/scheduler still not have ${NORMALIZED_MAC}"
                sleep ${TIMER}
                continue
              fi

              curl -fv ${API_URI}/sync-notify
              if [ $? -ne 0 ]
              then
                echo "${API_URI}/sync-notify is false"
                sleep ${TIMER}
                continue
              fi

              curl -f ${API_URI}/ignition?${QUERY} -o ${NEW_IGNITION}
              if [ $? -ne 0 ]
              then
                echo "${API_URI}/ignition?${QUERY} still not serve ignition file"
                sleep ${TIMER}
                continue
              fi

              # Be sure the returned Ignition is not a discovery one
              # We don't want installing discovery profile on disk
              jq -e '.storage.files[] | select(.path == "/etc/discovery") | .contents.source' ${NEW_IGNITION}
              if [ $? -ne 0 ]
              then

                  #until curl -f "${API_URI}/install-authorization/${QUERY}"
                  #do
                  #  echo "install-authorization not aquired"
                  #  sleep 10
                  #done

                  udevadm settle
                  #coreos-install -d /dev/sda -V current -C stable -i ${NEW_IGNITION} \
                  #  {{if index . "coreos_install_base_url"}} -b {{.coreos_install_base_url}}{{end}} || {
                  #  curl -f -XPOST \
                  #    "${API_URI}/lifecycle/coreos-install/fail/${QUERY}"
                  #  exit 2
                  #}
                  curl -f -XPOST "${API_URI}/lifecycle/coreos-install/success/${QUERY}"
                  sync
                  systemctl reboot
              fi
              sleep ${TIMER}
          done

    - path: /etc/coreos/update.conf
      mode: 0644
      filesystem: root
      contents:
        inline: |
          REBOOT_STRATEGY=off

    - path: /etc/rkt/paths.d/paths.json
      filesystem: root
      mode: 0644
      contents:
        inline: |
          {
            "rktKind": "paths",
            "rktVersion": "v1",
            "stage1-images": "/usr/lib/rkt/stage1-images"
          }

    - path: /etc/rkt/stage1.d/coreos.json
      filesystem: root
      mode: 0644
      contents:
        inline: |
          {
              "rktKind": "stage1",
              "rktVersion": "v1",
              "name": "coreos.com/rkt/stage1-coreos",
              "version": "v1.27.0",
              "location": "/usr/lib/rkt/stage1-images/stage1-coreos.aci"
          }


{{ if index . "ssh_authorized_keys" }}
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        {{ range $element := .ssh_authorized_keys }}
        - {{$element}}
        {{end}}
{{end}}